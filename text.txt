Cuda:
@cuda.jit
def itr_cuda(data, signal, dy, chi2):
    outer_loop_length = len(data) - len(signal) + 1
    inner_loop_length = len(signal)
    i = cuda.grid(1)
    if i < outer_loop_length and j < inner_loop_length:
        chi2[i] += ((data[i+j]-signal[j])**2) * dy[i+j]


range to smaller:
https://stackoverflow.com/questions/35051998/very-slow-numba-cuda-in-python/35143018#35143018

numba/cuda
https://github.com/stefanseefeld
https://github.com/sklam
https://github.com/seibert


https://stackoverflow.com/users/3293881/divakar
https://stackoverflow.com/users/4657412/davidw
http://gpgpu-computing.blogspot.com/2009/08/hitting-wall.html
https://www.ibm.com/developerworks/community/blogs/jfp/entry/How_To_Compute_Mandelbrodt_Set_Quickly?lang=en
