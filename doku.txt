https://rodluger.github.io/starry/api.html#the-kepler-module

Period grid
=====================
When searching for sine-like signals, e.g. using Fourier
Transforms, it is optimal to uniformly sample the trial
frequencies. This was also suggested for BLS (Kovács
et al. 2002). However, when searching for transit signals,
this is not optimal due to the transit duty cycle which
changes as a function of the planetary period due to
orbital mechanics. The optimal frequency sampling as a
function of stellar mass and radius was derived by Ofir
(2014) as

XXX

where M and R are the stellar mass and radius, G
is the gravitational constant, S is the time span of the
dataset and OS is the oversampling parameter to en-
sure that the peak is not missed between frequency sam-
ples. The search edges can be found at the Roche limit,

XXX

and f min = 2/S.



def period_grid()

Parameters:
	R_star in units of solar radii
	M_star in units of solar masses
	time_span in units of days
	period_min  in units of days
	period_max in units of days
	oversampling_factor=2

Returns
	A 1D array of float values representing a grid of trial periods in units of days

	
	
Duration grid
=====================
Traditionally, transit searches use a fixed grid of trial durations. This routine helps to generate a grid of optimized trial durations, limited to the physically plausible range in a given search. 

In the limit of the planet being much smaller than the
star (R p ? R s ) and assuming circular orbits, the max-
imum transit duration is T 14,max = 2R s /v p , where v p is
the planet’s average orbital velocity during the transit.
Shorter transit durations are possible if the planetary
transit path is not across the stellar diameter. We then
have
XXX

In the limit of the star being much more massive than
the planet, Kepler’s third law becomes
XXX
In the limit of the star being much more massive than
the planet, Kepler’s third law becomes
XXX
In Fig. 5 we plot Eq. (8) using dashed lines for three
main-sequence stars to embrace the physically most
plausible search space: an M8 red dwarf star (M s =
0.1M ? ,R s = 0.13R ? ), a sun-like star, and an A5 star
(M s = 2.1M ? ,R s = 1.7R ? )
We see that a significant
amount of planets is actually located above the upper-
most of these lines, which can be attributed to planets
transiting slightly evolved stars. In order to compen-
sate for planets transiting evolved star as well as the
possibility of planets on eccentric orbits 3 , we derive an
empirical estimate f....


def get_duration_grid(periods, log_step=1.1, upper_limit=0.12):

Parameters:
periods: A grid of trial periods, e.g., produced with "Period grid" (siehe oben)
log_step: Spacing between trial durations, where dur_n+1=dur_n * log_step. The default makes each trial duration 10% longer than the previous.
upper_limit=0.12  # Maximum fractional transit duration ever observed is 0.117
        # for Kepler-1368 b (as of Oct 2018), so we set upper_limit=0.15
        # Long fractional transit durations are computationally expensive 
        # following a quadratic relation. If applicable, use a different value.
        # Longer transits can still be found, but at decreasing sensitivity
		

		
Depth grid
==========================
get_depth_grid(y, deepest=None, shallowest=None, log_step=None)

Parameters:
y : Data
deepest: The deepest transit to be tested. If none is given, the deepest data point is taken as the maximum transit depth. It is recommended to clean the data from outliers, or to specify a max depth. Otherwise, a lot of unnecessary deep transits will be fitted, resulting in high computational demand
shallowest: The shallowest transit to be tested. If none is given, 10 ppm is assumed (the shallowest known transit is 50ppm; an Earth-sized planet transiting a G2V star corresponds to 100ppm). Smaller values result in higher computational demand. Transits down to 0.5*shallowest can be found at reduced sensitivity. Transits < 0.5*shallowest will not be found
log_step: Spacing between trial depths, where depth_n+1=depth_n * log_step. The default makes each trial depth 10% deeper than the previous.





def get_catalog_info(EPIC):
    """Takes EPIC ID, returns limb darkening parameters u (linear) and 
        a,b (quadratic), and stellar parameters. Values are pulled for minimum
        absolute deviation between given/catalog Teff and logg. Data are from:
        - K2 Ecliptic Plane Input Catalog, Huber+ 2016, 2016ApJS..224....2H
        - New limb-darkening coefficients, Claret+ 2012, 2013, 
          2012A&A...546A..14C, 2013A&A...552A..16C"""
 return u, a, b, mass[0], radius[0], logg[0], Teff[0]
